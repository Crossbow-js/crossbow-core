/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,50],$V1=[1,20],$V2=[5,14,15,18,31,36,40,45,50,53,56,59,63],$V3=[1,35],$V4=[1,28],$V5=[1,29],$V6=[1,30],$V7=[1,31],$V8=[1,32],$V9=[1,34],$Va=[14,15,18,31,36,40,45,50,53,56,59,63],$Vb=[14,15,18,31,36,40,50,53,56,59,63],$Vc=[1,44],$Vd=[35,69,76,84,85,86,87,88,89],$Ve=[22,35,62,69,72,76,79,84,85,86,87,88,89],$Vf=[1,51],$Vg=[22,35,62,69,72,76,79,84,85,86,87,88,89,93,94],$Vh=[2,49],$Vi=[62,69,76,84,85,86,87,88,89],$Vj=[1,58],$Vk=[1,59],$Vl=[35,69,76,79,84,85,86,87,88,89],$Vm=[22,69,76,84,85,86,87,88,89],$Vn=[1,79],$Vo=[1,87],$Vp=[69,72,76,84,85,86,87,88,89],$Vq=[35,79],$Vr=[22,35,62,72,76,79],$Vs=[1,113],$Vt=[22,35,62,69,72,76,79,84,85,86,87,88,89,93],$Vu=[1,126],$Vv=[76,81];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"root":3,"program":4,"EOF":5,"program_repetition0":6,"statement":7,"mustache":8,"helperBlock":9,"block":10,"rawBlock":11,"partial":12,"content":13,"COMMENT":14,"CONTENT":15,"openRawBlock":16,"END_RAW_BLOCK":17,"OPEN_RAW_BLOCK":18,"helperName":19,"openRawBlock_repetition0":20,"openRawBlock_option0":21,"CLOSE_RAW_BLOCK":22,"openHelperBlock":23,"helperBlock_option0":24,"closeBlock":25,"openInverse":26,"helperBlock_option1":27,"openBlock":28,"block_option0":29,"block_option1":30,"OPEN_BLOCK":31,"openBlock_repetition0":32,"openBlock_option0":33,"openBlock_option1":34,"CLOSE":35,"OPEN_HELPER":36,"openHelperBlock_repetition0":37,"openHelperBlock_option0":38,"openHelperBlock_option1":39,"OPEN_INVERSE":40,"openInverse_repetition0":41,"openInverse_option0":42,"openInverse_option1":43,"openInverseChain":44,"OPEN_INVERSE_CHAIN":45,"openInverseChain_repetition0":46,"openInverseChain_option0":47,"openInverseChain_option1":48,"inverseAndProgram":49,"INVERSE":50,"inverseChain":51,"inverseChain_option0":52,"OPEN_ENDBLOCK":53,"closeHelperBlock":54,"OPEN_HELPER_ENDBLOCK":55,"OPEN":56,"mustache_repetition0":57,"mustache_option0":58,"OPEN_UNESCAPED":59,"mustache_repetition1":60,"mustache_option1":61,"CLOSE_UNESCAPED":62,"OPEN_PARTIAL":63,"partialName":64,"partial_repetition0":65,"partial_option0":66,"param":67,"sexpr":68,"OPEN_SEXPR":69,"sexpr_repetition0":70,"sexpr_option0":71,"CLOSE_SEXPR":72,"hash":73,"hash_repetition_plus0":74,"hashSegment":75,"ID":76,"EQUALS":77,"blockParams":78,"OPEN_BLOCK_PARAMS":79,"blockParams_repetition_plus0":80,"CLOSE_BLOCK_PARAMS":81,"path":82,"dataName":83,"STRING":84,"NUMBER":85,"BOOLEAN":86,"UNDEFINED":87,"NULL":88,"DATA":89,"pathSegments":90,"path_repetition0":91,"filter":92,"PIPE":93,"SEP":94,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"COMMENT",15:"CONTENT",17:"END_RAW_BLOCK",18:"OPEN_RAW_BLOCK",22:"CLOSE_RAW_BLOCK",31:"OPEN_BLOCK",35:"CLOSE",36:"OPEN_HELPER",40:"OPEN_INVERSE",45:"OPEN_INVERSE_CHAIN",50:"INVERSE",53:"OPEN_ENDBLOCK",55:"OPEN_HELPER_ENDBLOCK",56:"OPEN",59:"OPEN_UNESCAPED",62:"CLOSE_UNESCAPED",63:"OPEN_PARTIAL",69:"OPEN_SEXPR",72:"CLOSE_SEXPR",76:"ID",77:"EQUALS",79:"OPEN_BLOCK_PARAMS",81:"CLOSE_BLOCK_PARAMS",84:"STRING",85:"NUMBER",86:"BOOLEAN",87:"UNDEFINED",88:"NULL",89:"DATA",93:"PIPE",94:"SEP"},
productions_: [0,[3,2],[4,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[13,1],[11,3],[16,5],[9,4],[9,4],[10,4],[10,4],[28,6],[23,6],[26,6],[44,6],[49,2],[51,3],[51,1],[25,3],[54,3],[8,5],[8,5],[12,5],[67,1],[67,1],[68,5],[73,1],[75,3],[78,3],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[64,1],[64,1],[83,2],[82,2],[82,1],[92,2],[90,3],[90,1],[6,0],[6,2],[20,0],[20,2],[21,0],[21,1],[24,0],[24,1],[27,0],[27,1],[29,0],[29,1],[30,0],[30,1],[32,0],[32,2],[33,0],[33,1],[34,0],[34,1],[37,0],[37,2],[38,0],[38,1],[39,0],[39,1],[41,0],[41,2],[42,0],[42,1],[43,0],[43,1],[46,0],[46,2],[47,0],[47,1],[48,0],[48,1],[52,0],[52,1],[57,0],[57,2],[58,0],[58,1],[60,0],[60,2],[61,0],[61,1],[65,0],[65,2],[66,0],[66,1],[70,0],[70,2],[71,0],[71,1],[74,1],[74,2],[80,1],[80,2],[91,0],[91,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
this.$ = new yy.Program($$[$0], null, {}, yy.locInfo(this._$));
break;
case 3: case 4: case 5: case 6: case 7: case 8: case 23: case 29: case 30: case 35: case 36: case 42: case 43:
this.$ = $$[$0];
break;
case 9:
this.$ = new yy.CommentStatement(yy.stripComment($$[$0]), yy.stripFlags($$[$0], $$[$0]), yy.locInfo(this._$));
break;
case 10:
this.$ = new yy.ContentStatement($$[$0], yy.locInfo(this._$));
break;
case 11:
this.$ = yy.prepareRawBlock($$[$0-2], $$[$0-1], $$[$0], this._$);
break;
case 12:
this.$ = { path: $$[$0-3], params: $$[$0-2], hash: $$[$0-1] };
break;
case 13:
this.$ = yy.prepareHelperBlock($$[$0-3], $$[$0-2], $$[$0-1], $$[$0], false, this._$);
break;
case 14:
this.$ = yy.prepareHelperBlock($$[$0-3], $$[$0-2], $$[$0-1], $$[$0], true, this._$);
break;
case 15:
this.$ = yy.prepareBlock($$[$0-3], $$[$0-2], $$[$0-1], $$[$0], false, this._$);
break;
case 16:
this.$ = yy.prepareBlock($$[$0-3], $$[$0-2], $$[$0-1], $$[$0], true, this._$);
break;
case 17: case 18: case 19: case 20:
this.$ = { path: $$[$0-4], params: $$[$0-3], hash: $$[$0-2], blockParams: $$[$0-1], strip: yy.stripFlags($$[$0-5], $$[$0]) };
break;
case 21:
this.$ = { strip: yy.stripFlags($$[$0-1], $$[$0-1]), program: $$[$0] };
break;
case 22:

    var inverse = yy.prepareBlock($$[$0-2], $$[$0-1], $$[$0], $$[$0], false, this._$),
        program = new yy.Program([inverse], null, {}, yy.locInfo(this._$));
    program.chained = true;

    this.$ = { strip: $$[$0-2].strip, program: program, chain: true };
  
break;
case 24:
this.$ = {path: $$[$0-1], strip: yy.stripFlags($$[$0-2], $$[$0])};
break;
case 25:
this.$ = {path: $$[$0-1], strip: yy.stripFlags($$[$0-2], $$[$0]), raw:true};
break;
case 26: case 27:
this.$ = yy.prepareMustache($$[$0-3], $$[$0-2], $$[$0-1], $$[$0-4], yy.stripFlags($$[$0-4], $$[$0]), this._$);
break;
case 28:
this.$ = new yy.PartialStatement($$[$0-3], $$[$0-2], $$[$0-1], yy.stripFlags($$[$0-4], $$[$0]), yy.locInfo(this._$));
break;
case 31:
this.$ = new yy.SubExpression($$[$0-3], $$[$0-2], $$[$0-1], yy.locInfo(this._$));
break;
case 32:
this.$ = new yy.Hash($$[$0], yy.locInfo(this._$));
break;
case 33:
this.$ = new yy.HashPair(yy.id($$[$0-2]), $$[$0], yy.locInfo(this._$));
break;
case 34:
this.$ = yy.id($$[$0-1]);
break;
case 37:
this.$ = new yy.StringLiteral($$[$0], yy.locInfo(this._$));
break;
case 38:
this.$ = new yy.NumberLiteral($$[$0], yy.locInfo(this._$));
break;
case 39:
this.$ = new yy.BooleanLiteral($$[$0], yy.locInfo(this._$));
break;
case 40:
this.$ = new yy.UndefinedLiteral(yy.locInfo(this._$));
break;
case 41:
this.$ = new yy.NullLiteral(yy.locInfo(this._$));
break;
case 44:
this.$ = yy.preparePath(true, $$[$0], this._$);
break;
case 45:
this.$ = yy.preparePath(false, $$[$0-1], $$[$0], this._$);
break;
case 46:
this.$ = yy.preparePath(false, $$[$0], this._$);
break;
case 47:
this.$ = [{id: $$[$0]}];
break;
case 48:
 $$[$0-2].push({part: yy.id($$[$0]), original: $$[$0], separator: $$[$0-1]}); this.$ = $$[$0-2]; 
break;
case 49:
this.$ = [{part: yy.id($$[$0]), original: $$[$0]}];
break;
case 50: case 52: case 64: case 70: case 76: case 82: case 90: case 94: case 98: case 102: case 110:
this.$ = [];
break;
case 51: case 53: case 65: case 71: case 77: case 83: case 91: case 95: case 99: case 103: case 107: case 109: case 111:
$$[$0-1].push($$[$0]);
break;
case 106: case 108:
this.$ = [$$[$0]];
break;
}
},
table: [o([5,14,15,18,31,36,40,56,59,63],$V0,{3:1,4:2,6:3}),{1:[3]},{5:[1,4]},o([5,45,50,53],[2,2],{7:5,8:6,9:7,10:8,11:9,12:10,13:11,23:15,26:16,28:17,16:18,14:[1,12],15:$V1,18:[1,24],31:[1,23],36:[1,21],40:[1,22],56:[1,13],59:[1,14],63:[1,19]}),{1:[2,1]},o($V2,[2,51]),o($V2,[2,3]),o($V2,[2,4]),o($V2,[2,5]),o($V2,[2,6]),o($V2,[2,7]),o($V2,[2,8]),o($V2,[2,9]),{19:25,76:$V3,82:26,83:27,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8,89:$V9,90:33},{19:36,76:$V3,82:26,83:27,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8,89:$V9,90:33},o($Va,$V0,{6:3,4:37}),o($Vb,$V0,{6:3,4:38}),o($Va,$V0,{6:3,4:39}),{13:40,15:$V1},{19:42,64:41,68:43,69:$Vc,76:$V3,82:26,83:27,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8,89:$V9,90:33},o([5,14,15,17,18,31,36,40,45,50,53,56,59,63],[2,10]),{19:45,76:$V3,82:26,83:27,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8,89:$V9,90:33},{19:46,76:$V3,82:26,83:27,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8,89:$V9,90:33},{19:47,76:$V3,82:26,83:27,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8,89:$V9,90:33},{19:48,76:$V3,82:26,83:27,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8,89:$V9,90:33},o($Vd,[2,90],{57:49}),o($Ve,[2,35]),o($Ve,[2,36]),o($Ve,[2,37]),o($Ve,[2,38]),o($Ve,[2,39]),o($Ve,[2,40]),o($Ve,[2,41]),o($Ve,[2,46],{91:50,93:[2,110],94:$Vf}),{76:$V3,90:52},o($Vg,$Vh),o($Vi,[2,94],{60:53}),{24:54,44:56,45:$Vj,49:57,50:$Vk,51:55,53:[2,56]},{27:60,30:61,49:62,50:$Vk,53:[2,58]},{29:63,44:56,45:$Vj,49:57,50:$Vk,51:64,53:[2,60]},{17:[1,65]},o($Vd,[2,98],{65:66}),o($Vd,[2,42]),o($Vd,[2,43]),{19:67,76:$V3,82:26,83:27,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8,89:$V9,90:33},o($Vl,[2,70],{37:68}),o($Vl,[2,76],{41:69}),o($Vl,[2,64],{32:70}),o($Vm,[2,52],{20:71}),{19:75,35:[2,92],58:72,67:73,68:76,69:$Vc,73:74,74:77,75:78,76:$Vn,82:26,83:27,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8,89:$V9,90:33},o($Ve,[2,45],{92:80,93:[1,81]}),{76:[1,82]},o($Ve,[2,44],{94:$Vf}),{19:75,61:83,62:[2,96],67:84,68:76,69:$Vc,73:85,74:77,75:78,76:$Vn,82:26,83:27,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8,89:$V9,90:33},{25:86,53:$Vo},{53:[2,57]},o($Va,$V0,{6:3,4:88}),{53:[2,23]},{19:89,76:$V3,82:26,83:27,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8,89:$V9,90:33},o([14,15,18,31,36,40,53,56,59,63],$V0,{6:3,4:90}),{25:91,53:$Vo},{25:92,53:$Vo},{53:[2,59]},{25:93,53:$Vo},{53:[2,61]},o($V2,[2,11]),{19:75,35:[2,100],66:94,67:95,68:76,69:$Vc,73:96,74:77,75:78,76:$Vn,82:26,83:27,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8,89:$V9,90:33},o($Vp,[2,102],{70:97}),o($Vq,[2,72],{82:26,83:27,90:33,19:75,68:76,74:77,75:78,38:98,67:99,73:100,69:$Vc,76:$Vn,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8,89:$V9}),o($Vq,[2,78],{82:26,83:27,90:33,19:75,68:76,74:77,75:78,42:101,67:102,73:103,69:$Vc,76:$Vn,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8,89:$V9}),o($Vq,[2,66],{82:26,83:27,90:33,19:75,68:76,74:77,75:78,33:104,67:105,73:106,69:$Vc,76:$Vn,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8,89:$V9}),{19:75,21:107,22:[2,54],67:108,68:76,69:$Vc,73:109,74:77,75:78,76:$Vn,82:26,83:27,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8,89:$V9,90:33},{35:[1,110]},o($Vd,[2,91]),{35:[2,93]},o($Ve,[2,29]),o($Ve,[2,30]),o([22,35,62,72,79],[2,32],{75:111,76:[1,112]}),o($Vr,[2,106]),o($Vg,$Vh,{77:$Vs}),o($Vt,[2,111]),{76:[1,114]},o($Vg,[2,48]),{62:[1,115]},o($Vi,[2,95]),{62:[2,97]},o($V2,[2,13]),{19:116,76:$V3,82:26,83:27,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8,89:$V9,90:33},{44:56,45:$Vj,49:57,50:$Vk,51:118,52:117,53:[2,88]},o($Vl,[2,82],{46:119}),{53:[2,21]},o($V2,[2,14]),o($V2,[2,16]),o($V2,[2,15]),{35:[1,120]},o($Vd,[2,99]),{35:[2,101]},{19:75,67:122,68:76,69:$Vc,71:121,72:[2,104],73:123,74:77,75:78,76:$Vn,82:26,83:27,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8,89:$V9,90:33},{35:[2,74],39:124,78:125,79:$Vu},o($Vl,[2,71]),o($Vq,[2,73]),{35:[2,80],43:127,78:128,79:$Vu},o($Vl,[2,77]),o($Vq,[2,79]),{34:129,35:[2,68],78:130,79:$Vu},o($Vl,[2,65]),o($Vq,[2,67]),{22:[1,131]},o($Vm,[2,53]),{22:[2,55]},o($V2,[2,26]),o($Vr,[2,107]),{77:$Vs},{19:75,67:132,68:76,69:$Vc,76:$V3,82:26,83:27,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8,89:$V9,90:33},o($Vt,[2,47]),o($V2,[2,27]),{35:[1,133]},{53:[2,22]},{53:[2,89]},o($Vq,[2,84],{82:26,83:27,90:33,19:75,68:76,74:77,75:78,47:134,67:135,73:136,69:$Vc,76:$Vn,84:$V4,85:$V5,86:$V6,87:$V7,88:$V8,89:$V9}),o($V2,[2,28]),{72:[1,137]},o($Vp,[2,103]),{72:[2,105]},{35:[1,138]},{35:[2,75]},{76:[1,140],80:139},{35:[1,141]},{35:[2,81]},{35:[1,142]},{35:[2,69]},{15:[2,12]},o($Vr,[2,33]),o($V2,[2,24]),{35:[2,86],48:143,78:144,79:$Vu},o($Vl,[2,83]),o($Vq,[2,85]),o($Ve,[2,31]),o($Va,[2,18]),{76:[1,146],81:[1,145]},o($Vv,[2,108]),o($Vb,[2,19]),o($Va,[2,17]),{35:[1,147]},{35:[2,87]},{35:[2,34]},o($Vv,[2,109]),o($Va,[2,20])],
defaultActions: {4:[2,1],55:[2,57],57:[2,23],62:[2,59],64:[2,61],74:[2,93],85:[2,97],90:[2,21],96:[2,101],109:[2,55],117:[2,22],118:[2,89],123:[2,105],125:[2,75],128:[2,81],130:[2,69],131:[2,12],144:[2,87],145:[2,34]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

function strip(start, end) {
  return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng-end);
}


var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
                                   if(yy_.yytext.slice(-2) === "\\\\") {
                                     strip(0,1);
                                     this.begin("mu");
                                   } else if(yy_.yytext.slice(-1) === "\\") {
                                     strip(0,1);
                                     this.begin("emu");
                                   } else {
                                     this.begin("mu");
                                   }
                                   if(yy_.yytext) return 15;
                                 
break;
case 1:return 15;
break;
case 2:
                                   this.popState();
                                   return 15;
                                 
break;
case 3:return 56
break;
case 4:this.popState(); return 35;
break;
case 5:return 76
break;
case 6:return 77;
break;
case 7:return 76;
break;
case 8:return 93;
break;
case 9:return 76;
break;
case 10:return 94;
break;
case 11:// ignore whitespace
break;
case 12:return 5;
break;
}
},
rules: [/^(?:[^\x00]*?(?=(\{\{)))/,/^(?:[^\x00]+)/,/^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/,/^(?:\{\{)/,/^(?:\}\})/,/^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/,/^(?:=)/,/^(?:\.\.)/,/^(?:\|)/,/^(?:\.(?=([=~}\s\/.)|])))/,/^(?:[\/.])/,/^(?:\s+)/,/^(?:$)/],
conditions: {"mu":{"rules":[3,4,5,6,7,8,9,10,11,12],"inclusive":false},"emu":{"rules":[2],"inclusive":false},"com":{"rules":[],"inclusive":false},"raw":{"rules":[],"inclusive":false},"INITIAL":{"rules":[0,1,12],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}