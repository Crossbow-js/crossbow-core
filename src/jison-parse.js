/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,43],$V1=[1,18],$V2=[5,13,14,17,27,31,35,39,42,43,46,50],$V3=[1,32],$V4=[1,25],$V5=[1,26],$V6=[1,27],$V7=[1,28],$V8=[1,29],$V9=[1,31],$Va=[13,14,17,27,31,35,39,42,43,46,50],$Vb=[13,14,17,27,31,39,42,43,46,50],$Vc=[1,40],$Vd=[30,56,63,67,68,69,70,71,72],$Ve=[21,30,49,56,59,63,67,68,69,70,71,72],$Vf=[1,46],$Vg=[21,30,49,56,59,63,67,68,69,70,71,72,76,77],$Vh=[2,42],$Vi=[49,56,63,67,68,69,70,71,72],$Vj=[1,55],$Vk=[1,56],$Vl=[21,56,63,67,68,69,70,71,72],$Vm=[1,72],$Vn=[1,79],$Vo=[56,59,63,67,68,69,70,71,72],$Vp=[21,30,49,59,63],$Vq=[1,100];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"root":3,"program":4,"EOF":5,"program_repetition0":6,"statement":7,"mustache":8,"block":9,"rawBlock":10,"partial":11,"content":12,"COMMENT":13,"CONTENT":14,"openRawBlock":15,"END_RAW_BLOCK":16,"OPEN_RAW_BLOCK":17,"helperName":18,"openRawBlock_repetition0":19,"openRawBlock_option0":20,"CLOSE_RAW_BLOCK":21,"openBlock":22,"block_option0":23,"closeBlock":24,"openInverse":25,"block_option1":26,"OPEN_BLOCK":27,"openBlock_repetition0":28,"openBlock_option0":29,"CLOSE":30,"OPEN_INVERSE":31,"openInverse_repetition0":32,"openInverse_option0":33,"openInverseChain":34,"OPEN_INVERSE_CHAIN":35,"openInverseChain_repetition0":36,"openInverseChain_option0":37,"inverseAndProgram":38,"INVERSE":39,"inverseChain":40,"inverseChain_option0":41,"OPEN_ENDBLOCK":42,"OPEN":43,"mustache_repetition0":44,"mustache_option0":45,"OPEN_UNESCAPED":46,"mustache_repetition1":47,"mustache_option1":48,"CLOSE_UNESCAPED":49,"OPEN_PARTIAL":50,"partialName":51,"partial_repetition0":52,"partial_option0":53,"param":54,"sexpr":55,"OPEN_SEXPR":56,"sexpr_repetition0":57,"sexpr_option0":58,"CLOSE_SEXPR":59,"hash":60,"hash_repetition_plus0":61,"hashSegment":62,"ID":63,"EQUALS":64,"path":65,"dataName":66,"STRING":67,"NUMBER":68,"BOOLEAN":69,"UNDEFINED":70,"NULL":71,"DATA":72,"pathSegments":73,"path_option0":74,"filter":75,"PIPE":76,"SEP":77,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:"COMMENT",14:"CONTENT",16:"END_RAW_BLOCK",17:"OPEN_RAW_BLOCK",21:"CLOSE_RAW_BLOCK",27:"OPEN_BLOCK",30:"CLOSE",31:"OPEN_INVERSE",35:"OPEN_INVERSE_CHAIN",39:"INVERSE",42:"OPEN_ENDBLOCK",43:"OPEN",46:"OPEN_UNESCAPED",49:"CLOSE_UNESCAPED",50:"OPEN_PARTIAL",56:"OPEN_SEXPR",59:"CLOSE_SEXPR",63:"ID",64:"EQUALS",67:"STRING",68:"NUMBER",69:"BOOLEAN",70:"UNDEFINED",71:"NULL",72:"DATA",76:"PIPE",77:"SEP"},
productions_: [0,[3,2],[4,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[12,1],[10,3],[15,5],[9,4],[9,4],[22,5],[25,5],[34,5],[38,2],[40,3],[40,1],[24,3],[8,5],[8,5],[11,5],[54,1],[54,1],[55,5],[60,1],[62,3],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[51,1],[51,1],[66,2],[65,2],[75,2],[73,3],[73,1],[6,0],[6,2],[19,0],[19,2],[20,0],[20,1],[23,0],[23,1],[26,0],[26,1],[28,0],[28,2],[29,0],[29,1],[32,0],[32,2],[33,0],[33,1],[36,0],[36,2],[37,0],[37,1],[41,0],[41,1],[44,0],[44,2],[45,0],[45,1],[47,0],[47,2],[48,0],[48,1],[52,0],[52,2],[53,0],[53,1],[57,0],[57,2],[58,0],[58,1],[61,1],[61,2],[74,0],[74,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
this.$ = { type: 'program', body: $$[$0], loc: yy.locInfo(this._$) };
break;
case 3: case 4: case 5: case 6: case 7: case 19: case 24: case 25: case 29: case 30: case 36: case 37: case 40:
this.$ = $$[$0];
break;
case 8:
this.$ = {type: 'comment', value: yy.stripComment($$[$0]), strip: yy.stripFlags($$[$0], $$[$0]), loc: yy.locInfo(this._$)};
break;
case 9:
this.$ = {type: 'buffer', value: $$[$0], loc: yy.locInfo(this._$)};
break;
case 10:
this.$ = yy.prepareRawBlock($$[$0-2], $$[$0-1], $$[$0], this._$);
break;
case 11:
this.$ = { path: $$[$0-3], params: $$[$0-2], hash: $$[$0-1] };
break;
case 12:
this.$ = yy.prepareBlock($$[$0-3], $$[$0-2], $$[$0-1], $$[$0], false, this._$);
break;
case 13:
this.$ = yy.prepareBlock($$[$0-3], $$[$0-2], $$[$0-1], $$[$0], true, this._$);
break;
case 14: case 15: case 16:
this.$ = { path: $$[$0-3], params: $$[$0-2], hash: $$[$0-1], strip: yy.stripFlags($$[$0-4], $$[$0]) };
break;
case 17:
this.$ = { strip: yy.stripFlags($$[$0-1], $$[$0-1]), program: $$[$0] };
break;
case 18:

    var inverse = yy.prepareBlock($$[$0-2], $$[$0-1], $$[$0], $$[$0], false, this._$),
        program = new yy.Program([inverse], null, {}, yy.locInfo(this._$));
    program.chained = true;

    this.$ = { strip: $$[$0-2].strip, program: program, chain: true };
  
break;
case 20:
this.$ = {path: $$[$0-1], strip: yy.stripFlags($$[$0-2], $$[$0])};
break;
case 21: case 22:
this.$ = yy.prepareMustache($$[$0-3], $$[$0-2], $$[$0-1], $$[$0-4], yy.stripFlags($$[$0-4], $$[$0]), this._$);
break;
case 23:
this.$ = {type: 'partial', name: $$[$0-3], params: $$[$0-2], hash: $$[$0-1], strip: yy.stripFlags($$[$0-4], $$[$0]), loc: yy.locInfo(this._$) };
break;
case 26:
this.$ = { type: 'sexpr', path: $$[$0-3], params: $$[$0-2], hash: $$[$0-1], loc: yy.locInfo(this._$) };
break;
case 27:
this.$ = { type: 'hash', pairs: $$[$0], loc: yy.locInfo(this._$) };
break;
case 28:
this.$ = {type: 'hashpair', key: yy.id($$[$0-2]), value: $$[$0], loc: yy.locInfo(this._$)};
break;
case 31:
this.$ =    {type: 'string', value: $$[$0], loc: yy.locInfo(this._$)};
break;
case 32:
this.$ =    {type: 'number', value: $$[$0], loc: yy.locInfo(this._$)};
break;
case 33:
this.$ =   {type: 'boolean', value: $$[$0], loc: yy.locInfo(this._$)};
break;
case 34:
this.$ = {type: 'undefined', value: $$[$0], loc: yy.locInfo(this._$)};
break;
case 35:
this.$ =      {type: 'null', value: $$[$0], loc: yy.locInfo(this._$)};
break;
case 38:
this.$ = yy.preparePath(true, $$[$0], [], this._$);
break;
case 39:
this.$ = yy.preparePath(false, $$[$0-1], [], this._$);
break;
case 41:
 $$[$0-2].push({part: yy.id($$[$0]), original: $$[$0], separator: $$[$0-1]}); this.$ = $$[$0-2]; 
break;
case 42:
this.$ = [{part: yy.id($$[$0]), original: $$[$0]}];
break;
case 43: case 45: case 53: case 57: case 61: case 67: case 71: case 75: case 79:
this.$ = [];
break;
case 44: case 46: case 54: case 58: case 62: case 68: case 72: case 76: case 80: case 84:
$$[$0-1].push($$[$0]);
break;
case 83:
this.$ = [$$[$0]];
break;
}
},
table: [o([5,13,14,17,27,31,43,46,50],$V0,{3:1,4:2,6:3}),{1:[3]},{5:[1,4]},o([5,35,39,42],[2,2],{7:5,8:6,9:7,10:8,11:9,12:10,22:14,25:15,15:16,13:[1,11],14:$V1,17:[1,21],27:[1,19],31:[1,20],43:[1,12],46:[1,13],50:[1,17]}),{1:[2,1]},o($V2,[2,44]),o($V2,[2,3]),o($V2,[2,4]),o($V2,[2,5]),o($V2,[2,6]),o($V2,[2,7]),o($V2,[2,8]),{18:22,63:$V3,65:23,66:24,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:30},{18:33,63:$V3,65:23,66:24,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:30},o($Va,$V0,{6:3,4:34}),o($Vb,$V0,{6:3,4:35}),{12:36,14:$V1},{18:38,51:37,55:39,56:$Vc,63:$V3,65:23,66:24,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:30},o([5,13,14,16,17,27,31,35,39,42,43,46,50],[2,9]),{18:41,63:$V3,65:23,66:24,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:30},{18:42,63:$V3,65:23,66:24,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:30},{18:43,63:$V3,65:23,66:24,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:30},o($Vd,[2,67],{44:44}),o($Ve,[2,29]),o($Ve,[2,30]),o($Ve,[2,31]),o($Ve,[2,32]),o($Ve,[2,33]),o($Ve,[2,34]),o($Ve,[2,35]),o($Ve,[2,85],{74:45,75:47,76:[1,48],77:$Vf}),{63:$V3,73:49},o($Vg,$Vh),o($Vi,[2,71],{47:50}),{23:51,34:53,35:$Vj,38:54,39:$Vk,40:52,42:[2,49]},{26:57,38:58,39:$Vk,42:[2,51]},{16:[1,59]},o($Vd,[2,75],{52:60}),o($Vd,[2,36]),o($Vd,[2,37]),{18:61,63:$V3,65:23,66:24,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:30},o($Vd,[2,53],{28:62}),o($Vd,[2,57],{32:63}),o($Vl,[2,45],{19:64}),{18:68,30:[2,69],45:65,54:66,55:69,56:$Vc,60:67,61:70,62:71,63:$Vm,65:23,66:24,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:30},o($Ve,[2,39]),{63:[1,73]},o($Ve,[2,86]),{63:$V3,73:74},o($Ve,[2,38],{77:$Vf}),{18:68,48:75,49:[2,73],54:76,55:69,56:$Vc,60:77,61:70,62:71,63:$Vm,65:23,66:24,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:30},{24:78,42:$Vn},{42:[2,50]},o($Va,$V0,{6:3,4:80}),{42:[2,19]},{18:81,63:$V3,65:23,66:24,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:30},o([13,14,17,27,31,42,43,46,50],$V0,{6:3,4:82}),{24:83,42:$Vn},{42:[2,52]},o($V2,[2,10]),{18:68,30:[2,77],53:84,54:85,55:69,56:$Vc,60:86,61:70,62:71,63:$Vm,65:23,66:24,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:30},o($Vo,[2,79],{57:87}),{18:68,29:88,30:[2,55],54:89,55:69,56:$Vc,60:90,61:70,62:71,63:$Vm,65:23,66:24,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:30},{18:68,30:[2,59],33:91,54:92,55:69,56:$Vc,60:93,61:70,62:71,63:$Vm,65:23,66:24,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:30},{18:68,20:94,21:[2,47],54:95,55:69,56:$Vc,60:96,61:70,62:71,63:$Vm,65:23,66:24,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:30},{30:[1,97]},o($Vd,[2,68]),{30:[2,70]},o($Ve,[2,24]),o($Ve,[2,25]),o([21,30,49,59],[2,27],{62:98,63:[1,99]}),o($Vp,[2,83]),o($Vg,$Vh,{64:$Vq}),o($Vg,[2,41]),o($Ve,[2,40],{77:$Vf}),{49:[1,101]},o($Vi,[2,72]),{49:[2,74]},o($V2,[2,12]),{18:102,63:$V3,65:23,66:24,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:30},{34:53,35:$Vj,38:54,39:$Vk,40:104,41:103,42:[2,65]},o($Vd,[2,61],{36:105}),{42:[2,17]},o($V2,[2,13]),{30:[1,106]},o($Vd,[2,76]),{30:[2,78]},{18:68,54:108,55:69,56:$Vc,58:107,59:[2,81],60:109,61:70,62:71,63:$Vm,65:23,66:24,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:30},{30:[1,110]},o($Vd,[2,54]),{30:[2,56]},{30:[1,111]},o($Vd,[2,58]),{30:[2,60]},{21:[1,112]},o($Vl,[2,46]),{21:[2,48]},o($V2,[2,21]),o($Vp,[2,84]),{64:$Vq},{18:68,54:113,55:69,56:$Vc,63:$V3,65:23,66:24,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:30},o($V2,[2,22]),{30:[1,114]},{42:[2,18]},{42:[2,66]},{18:68,30:[2,63],37:115,54:116,55:69,56:$Vc,60:117,61:70,62:71,63:$Vm,65:23,66:24,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,72:$V9,73:30},o($V2,[2,23]),{59:[1,118]},o($Vo,[2,80]),{59:[2,82]},o($Va,[2,14]),o($Vb,[2,15]),{14:[2,11]},o($Vp,[2,28]),o($V2,[2,20]),{30:[1,119]},o($Vd,[2,62]),{30:[2,64]},o($Ve,[2,26]),o($Va,[2,16])],
defaultActions: {4:[2,1],52:[2,50],54:[2,19],58:[2,52],67:[2,70],77:[2,74],82:[2,17],86:[2,78],90:[2,56],93:[2,60],96:[2,48],103:[2,18],104:[2,66],109:[2,82],112:[2,11],117:[2,64]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

function strip(start, end) {
  return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng-end);
}


var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
                                   if(yy_.yytext.slice(-2) === "\\\\") {
                                     strip(0,1);
                                     this.begin("mu");
                                   } else if(yy_.yytext.slice(-1) === "\\") {
                                     strip(0,1);
                                     this.begin("emu");
                                   } else {
                                     this.begin("mu");
                                   }
                                   if(yy_.yytext) return 14;
                                 
break;
case 1:return 14;
break;
case 2:
                                   this.popState();
                                   return 14;
                                 
break;
case 3:
                                  yy_.yytext = yy_.yytext.substr(5, yy_.yyleng-9);
                                  this.popState();
                                  return 16;
                                 
break;
case 4: return 14; 
break;
case 5:
  this.popState();
  return 13;

break;
case 6:return 56;
break;
case 7:return 59;
break;
case 8: return 17; 
break;
case 9:
                                  this.popState();
                                  this.begin('raw');
                                  return 21;
                                 
break;
case 10:return 50;
break;
case 11:return 27;
break;
case 12:return 42;
break;
case 13:this.popState(); return 39;
break;
case 14:this.popState(); return 39;
break;
case 15:return 31;
break;
case 16:return 35;
break;
case 17:return 46;
break;
case 18:return 43;
break;
case 19:
  this.unput(yy_.yytext);
  this.popState();
  this.begin('com');

break;
case 20:
  this.popState();
  return 13;

break;
case 21:return 43;
break;
case 22:return 64;
break;
case 23:return 63;
break;
case 24:return 63;
break;
case 25:return 77;
break;
case 26:// ignore whitespace
break;
case 27:this.popState(); return 49;
break;
case 28:this.popState(); return 30;
break;
case 29:yy_.yytext = strip(1,2).replace(/\\"/g,'"'); return 67;
break;
case 30:yy_.yytext = strip(1,2).replace(/\\'/g,"'"); return 67;
break;
case 31:return 72;
break;
case 32:return 69;
break;
case 33:return 69;
break;
case 34:return 70;
break;
case 35:return 71;
break;
case 36:return 68;
break;
case 37:return 76;
break;
case 38:return 63;
break;
case 39:return 63;
break;
case 40:return 'INVALID';
break;
case 41:return 5;
break;
}
},
rules: [/^(?:[^\x00]*?(?=(\{\{)))/,/^(?:[^\x00]+)/,/^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/,/^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/,/^(?:[^\x00]*?(?=(\{\{\{\{\/)))/,/^(?:[\s\S]*?--(~)?\}\})/,/^(?:\()/,/^(?:\))/,/^(?:\{\{\{\{)/,/^(?:\}\}\}\})/,/^(?:\{\{(~)?>)/,/^(?:\{\{(~)?#)/,/^(?:\{\{(~)?\/)/,/^(?:\{\{(~)?\^\s*(~)?\}\})/,/^(?:\{\{(~)?\s*else\s*(~)?\}\})/,/^(?:\{\{(~)?\^)/,/^(?:\{\{(~)?\s*else\b)/,/^(?:\{\{(~)?\{)/,/^(?:\{\{(~)?&)/,/^(?:\{\{(~)?!--)/,/^(?:\{\{(~)?![\s\S]*?\}\})/,/^(?:\{\{(~)?)/,/^(?:=)/,/^(?:\.\.)/,/^(?:\.(?=([=~}\s\/.)|])))/,/^(?:[\/.])/,/^(?:\s+)/,/^(?:\}(~)?\}\})/,/^(?:(~)?\}\})/,/^(?:"(\\["]|[^"])*")/,/^(?:'(\\[']|[^'])*')/,/^(?:@)/,/^(?:true(?=([~}\s)])))/,/^(?:false(?=([~}\s)])))/,/^(?:undefined(?=([~}\s)])))/,/^(?:null(?=([~}\s)])))/,/^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/,/^(?:\|)/,/^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/,/^(?:\[[^\]]*\])/,/^(?:.)/,/^(?:$)/],
conditions: {"mu":{"rules":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41],"inclusive":false},"emu":{"rules":[2],"inclusive":false},"com":{"rules":[5],"inclusive":false},"raw":{"rules":[3,4],"inclusive":false},"INITIAL":{"rules":[0,1,41],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}